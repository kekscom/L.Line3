var Color=function(){var t={aqua:"#00ffff",black:"#000000",blue:"#0000ff",fuchsia:"#ff00ff",gray:"#808080",grey:"#808080",green:"#008000",lime:"#00ff00",maroon:"#800000",navy:"#000080",olive:"#808000",orange:"#ffa500",purple:"#800080",red:"#ff0000",silver:"#c0c0c0",teal:"#008080",white:"#ffffff",yellow:"#ffff00"};function e(t,e,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?t+6*(e-t)*i:i<.5?e:i<2/3?t+(e-t)*(2/3-i)*6:t}function i(t,e){return Math.min(e,Math.max(0,t))}var o=function(t,e,i,o){this.H=t,this.S=e,this.L=i,this.A=o};return o.parse=function(e){var i,o=0,s=0,n=0,r=1;if(e=(""+e).toLowerCase(),i=(e=t[e]||e).match(/^#(\w{2})(\w{2})(\w{2})$/))o=parseInt(i[1],16),s=parseInt(i[2],16),n=parseInt(i[3],16);else{if(!(i=e.match(/rgba?\((\d+)\D+(\d+)\D+(\d+)(\D+([\d.]+))?\)/)))return;o=parseInt(i[1],10),s=parseInt(i[2],10),n=parseInt(i[3],10),r=i[4]?parseFloat(i[5]):1}return this.fromRGBA(o,s,n,r)},o.fromRGBA=function(t,e,i,s){"object"==typeof t?(e=t.g/255,i=t.b/255,s=t.a,t=t.r/255):(t/=255,e/=255,i/=255);var n,r,h=Math.max(t,e,i),a=Math.min(t,e,i),_=(h+a)/2,c=h-a;if(c){switch(r=_>.5?c/(2-h-a):c/(h+a),h){case t:n=(e-i)/c+(e<i?6:0);break;case e:n=(i-t)/c+2;break;case i:n=(t-e)/c+4}n*=60}else n=r=0;return new o(n,r,_,s)},o.prototype={toRGBA:function(){var t=i(this.H,360),o=i(this.S,1),s=i(this.L,1),n={a:i(this.A,1)};if(0===o)n.r=s,n.g=s,n.b=s;else{var r=s<.5?s*(1+o):s+o-s*o,h=2*s-r;t/=360,n.r=e(h,r,t+1/3),n.g=e(h,r,t),n.b=e(h,r,t-1/3)}return{r:Math.round(255*n.r),g:Math.round(255*n.g),b:Math.round(255*n.b),a:n.a}},toString:function(){var t=this.toRGBA();return 1===t.a?"#"+((1<<24)+(t.r<<16)+(t.g<<8)+t.b).toString(16).slice(1,7):"rgba("+[t.r,t.g,t.b,t.a.toFixed(2)].join(",")+")"},hue:function(t){return new o(this.H*t,this.S,this.L,this.A)},saturation:function(t){return new o(this.H,this.S*t,this.L,this.A)},lightness:function(t){return new o(this.H,this.S,this.L*t,this.A)},alpha:function(t){return new o(this.H,this.S,this.L,this.A*t)}},o}();L.Line3=class extends L.Layer{constructor(t){super(),this._defaultColor=Color.parse(L.Line3.DEFAULT_COLOR),this._origin=[0,0],this._width=0,this._height=0,this._offset=[0,0],this._cam=[0,0,450],this._data=[],this._renderData=[],this._container=document.createElement("DIV"),this._container.style.pointerEvents="none",this._container.style.position="absolute",this._container.style.left="0",this._container.style.top="0",this._layers=[new L.Line3.ShadowLayer(this),new L.Line3.FeatureLayer(this)],t&&this.setData(t)}onAdd(t){this.map=t,this.map._panes.overlayPane.appendChild(this._container);const e=this._getMapOffset(),i=this._getMapOrigin();this._setSize(this.map._size.x,this.map._size.y),this._origin=[i[0]-e[0],i[1]-e[1]],this._setZoom(this.map._zoom),this._container.style.left=-e[0]+"px",this._container.style.top=-e[1]+"px",this.map.on({move:this._onMove,moveend:this._onMoveEnd,zoomstart:this._onZoomStart,zoomend:this._onZoomEnd,resize:this._onResize,viewreset:this._onViewReset},this),this.map.options.zoomAnimation&&this.map.on("zoomanim",this._onZoom,this),this._prepareRenderData(this._data)}onRemove(){this.map.off({move:this._onMove,moveend:this._onMoveEnd,zoomstart:this._onZoomStart,zoomend:this._onZoomEnd,resize:this._onResize,viewreset:this._onViewReset},this),this.map.options.zoomAnimation&&this.map.off("zoomanim",this._onZoom,this),this._container.parentNode.removeChild(this._container),delete this.map}setData(t){this._data=this._readGeoJSON(t),this._prepareRenderData(this._data)}geoToPixel(t,e=1){return[(t[0]/360+.5)*e<<0,Math.min(1,Math.max(0,.5-Math.log(Math.tan(Math.PI/4+Math.PI/2*t[1]/180))/Math.PI/2))*e<<0]}_readGeoJSON(t){return t&&t.features?t.features.map(t=>{const e=t.properties;return e.coordinates=t.geometry.coordinates,(t.id||t.properties.id)&&(e.id=t.id||t.properties.id),e}):[]}_scale(t){const e={};t.id&&(e.id=t.id),e.coordinates=t.coordinates.map(t=>{const e=this.geoToPixel(t,this._worldPixels);return e[2]=t[2]/this._zoomScale,e});const i=t.color?Color.parse(t.color):this._defaultColor;return e.altColor=""+i.lightness(.7),e.color=""+i,e}_prepareRenderData(t){this._zoom<L.Line3.MIN_ZOOM?this._renderData=[]:(this._renderData=t.map(t=>this._scale(t)),this._render())}_onMove(t){const e=this._getMapOffset();this._moveCam([this._offset[0]-e[0],this._offset[1]-e[1]])}_onMoveEnd=function(t){if(this._noMoveEnd)return void(this._noMoveEnd=!1);const e=this._getMapOrigin();this._offset=this._getMapOffset(),this._container.style.left=-this._offset[0]+"px",this._container.style.top=-this._offset[1]+"px",this._moveCam([0,0]),this._setSize(this.map._size.x,this.map._size.y),this._origin=[e[0]-this._offset[0],e[1]-this._offset[1]],this._render(),this._prepareRenderData(this._data)};_onZoom(t){}_onZoomEnd(t){const e=this._getMapOffset(),i=this._getMapOrigin();this._origin=[i[0]-e[0],i[1]-e[1]],this._isZooming=!1,this._setZoom(this.map._zoom),this._prepareRenderData(this._data),this._render(),this._noMoveEnd=!0}_onViewReset(){this._offset=this._getMapOffset(),this._container.style.left=-this._offset[0]+"px",this._container.style.top=-this._offset[1]+"px",this._moveCam([0,0])}_getMapOffset(){const t=L.DomUtil.getPosition(this.map._mapPane);return[t.x,t.y]}_getMapOrigin(){const t=this.map.getPixelOrigin();return[t.x,t.y]}_moveCam(t){this._cam=[this._center[0]+t[0],this._height+t[1],this._cam[2]],this._render()}_setSize(t,e){this._width=t,this._height=e,this._center=[this._width/2<<0,this._height/2<<0],this._cam=[this._center[0],this._height,this._cam[2]],this._maxZ=this._cam[2]-50,this._layers.forEach(t=>t.setSize(this._width,this._height))}_setZoom(t){this._zoom=t,this._worldPixels=256<<this._zoom,this._zoomFactor=Math.pow(.95,this._zoom-L.Line3.MIN_ZOOM),this._zoomColorStr=""+this._defaultColor.alpha(this._zoomFactor),this._zoomScale=6/Math.pow(2,this._zoom-L.Line3.MIN_ZOOM)}_onResize(t){this._setSize(t),this._render(),this._prepareRenderData(this._data)}_onZoomStart(t){this._isZooming=!0,this._render()}_render(){requestAnimationFrame(t=>{this._layers.forEach(t=>t.render())})}},L.Line3.MIN_ZOOM=15,L.Line3.DEFAULT_COLOR="rgba(200, 190, 180)",L.Line3.FeatureLayer=class{constructor(t){this._controller=t,this._canvas=document.createElement("CANVAS"),this._canvas.style.transform="translate3d(0, 0, 0)",this._canvas.style.imageRendering="optimizeSpeed",this._canvas.style.position="absolute",this._canvas.style.left="0",this._canvas.style.top="0",this._context=this._canvas.getContext("2d"),this._context.lineCap="round",this._context.lineJoin="round",this._context.lineWidth=1,this._context.imageSmoothingEnabled=!0,this._controller._container.appendChild(this._canvas)}setSize(t,e){this._canvas.width=t,this._canvas.height=e}render(){this._context.clearRect(0,0,this._controller._width,this._controller._height),this._controller._zoom<L.Line3.MIN_ZOOM||this._controller._isZooming||this._controller._renderData.forEach(t=>this._draw(t))}_draw(t){const e=t.coordinates;if(!this._isVisible(e))return;const i=this._controller._origin,o=this._controller._cam[2],s=[0,0,0],n=[0,0,0];let r,h;for(let a=0;a<e.length-1;a++)s[0]=e[a][0]-i[0],s[1]=e[a][1]-i[1],s[2]=e[a][2],n[0]=e[a+1][0]-i[0],n[1]=e[a+1][1]-i[1],n[2]=e[a+1][2],r=this._project(s,o/(o-s[2])),h=this._project(n,o/(o-n[2])),s[0]<n[0]&&s[1]<n[1]||s[0]>n[0]&&s[1]>n[1]?this._context.fillStyle=t.altColor:this._context.fillStyle=t.color,this._context.beginPath(),this._polygon([n,s,r,h]),this._context.closePath(),this._context.stroke(),this._context.fill()}_polygon(t){this._context.moveTo(t[0][0],t[0][1]);for(let e=1;e<t.length;e++)this._context.lineTo(t[e][0],t[e][1])}_project(t,e){return[(t[0]-this._controller._cam[0])*e+this._controller._cam[0]<<0,(t[1]-this._controller._cam[1])*e+this._controller._cam[1]<<0]}_isVisible(t){const e=this._controller._width+this._controller._origin[0],i=this._controller._height+this._controller._origin[1];return t.some(t=>t[0]>this._controller._origin[0]&&t[0]<e&&t[1]>this._controller._origin[1]&&t[1]<i)}},L.Line3.ShadowLayer=class extends L.Line3.FeatureLayer{constructor(t){super(t),this._direction=[2,2],this._context.fillStyle="#000000"}render(){this._context.clearRect(0,0,this._controller._width,this._controller._height),this._controller._zoom<L.Line3.MIN_ZOOM||this._controller._isZooming||(this._context.canvas.style.opacity=""+.4/(2*this._controller._zoomFactor),this._controller._renderData.forEach(t=>this._draw(t)))}_draw(t){const e=t.coordinates;if(!this._isVisible(e))return;const i=this._controller._origin,o=[0,0,0],s=[0,0,0];let n,r;for(let t=0;t<e.length-1;t++)o[0]=e[t][0]-i[0],o[1]=e[t][1]-i[1],o[2]=e[t][2],s[0]=e[t+1][0]-i[0],s[1]=e[t+1][1]-i[1],s[2]=e[t+1][2],n=this._project(o,o[2]),r=this._project(s,s[2]),this._context.beginPath(),this._polygon([o,n,r,s]),this._context.closePath(),this._context.fill()}_project(t,e){return[t[0]+this._direction[0]*e<<0,t[1]+this._direction[1]*e<<0]}};